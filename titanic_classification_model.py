# -*- coding: utf-8 -*-
"""titanic classification model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/0B10smQfD3dNkZGZPNGpzOWhESmJzSVRMNVVfdmF5UkdWZ2lv?resourcekey=0-dQSP4eY9MXpimQHQvfQQuQ
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt 
# %matplotlib inline

df = pd.read_csv('titanic/train.csv', index_col='PassengerId')

df.head()

df.shape

#df = df.dropna()

df.shape

y = df['Survived']
x = df.drop(['Survived', 'Name', 'Cabin', 'Ticket'], axis = 1)



x.head()

x.shape

x.isnull().sum()

x = x.fillna(x.mean())

x.isnull().sum()

x.head()

x.shape

x.corr()

x.shape

x.hist(bins = 50, figsize = (20, 15))
plt.show()

embarked = pd.get_dummies(x.Embarked, prefix = 'Embarked')

x = x.drop('Embarked', axis = 1)

x = x.join(embarked)

x = x.join(pd.get_dummies(x.Sex, prefix = 'Sex'))

x = x.drop('Sex', axis = 1)

x.head()

x.isnull().sum()

from sklearn.model_selection import train_test_split
from sklearn import preprocessing

y.shape, x.shape

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=42)

from sklearn.preprocessing import StandardScaler
x_train = StandardScaler().fit_transform(x_train)

x_obsr, x_ftur = x_train.shape

x_train.shape

"""*********************************************************

*****************************************************************
"""

w = np.random.normal(0,1, [x_ftur])
b = np.random.normal(1)

w.shape

w

z = np.dot(w, x_train.T) + b

y_p = 1 / (1 + np.exp(-z))

y_p.shape, y_train.shape

j = (-y_train*np.log(y_p) - (1 - y_train)*np.log(1 - y_p)).mean()

j

dw = np.dot(x_train.T, (y_p - y_train)) / y_train.shape[0]
db = (y_p - y_train) / y_train.shape[0]

lr = 0.01
b = 0
cost_per_itt = []
i = 0
p_Y = []
while i < 1000:
    z = np.dot(w, x_train.T) + b
    y_p = 1 / (1 + np.exp(-z))
    p_Y.append(y_p)
    j = (-y_train*np.log(y_p) - (1 - y_train)*np.log(1 - y_p)).mean()
    cost_per_itt.append(j)
    dw = np.dot(x_train.T, (y_p - y_train)) / y_train.shape[0]
    db = (y_p - y_train) / y_train.shape[0]
    w = w - lr*dw
    b = b - lr*db
    i+=1

cost_per_itt

plt.plot(cost_per_itt)

from sklearn.preprocessing import Binarizer

binarizer = Binarizer(threshold=0.5).fit([y_p]) 
binaryX = binarizer.transform([y_p]) 
binaryX



